;;;;
;;;; max2-exp.sl - The max2 example problem encoded in SemGuS
;;;;

;;; Metadata
;; (set-info :format-version "2.1.0")
;; (set-info :author("Jinwoo Kim" "Keith Johnson" "Wiley Corning"))
;; (set-info :realizable true)

;;;
;;; Term types
;;;
(declare-term-types
;; Nonterminals
((E 0))

;; Productions
(
 ( ; E productions
  ($x)
  ($y)
  ($0)
  ($1)
  ($2)
  ($-1)
  ($-2)
  ($+ E E))))

;;;
;;; Semantics
;;;
(define-funs-rec
    ;; CHC heads
    ((E.Sem ((et E) (x Int) (y Int) (r Int)) Bool))

  ;; Bodies
  ((! (match et ; E.Sem definitions
       (($-1 (= r (- 0 1)))
        ($-2 (= r (- 0 2)))
        ($2 (= r 2))
        ($0 (= r 0))
        ($1 (= r 1))
        ($x (= r x))
        ($y (= r y))
        (($+ et1 et2)
         (exists ((r1 Int) (r2 Int))
             (and
              (E.Sem et1 x y r1)
              (E.Sem et2 x y r2)
              (= r (+ r1 r2)))))))

    :input (x y) :output (r))))


;;;
;;; Function to synthesize - a term rooted at E
;;;
(synth-fun force-+ () E
           ((+ E) (E E))
           ((+ E (($+ E E))) 
            (E E ($-2 $-1 $0 $1 $2 $x $y ($+ E E)))))

;;;
;;; Constraints - examples
;;;
(constraint (E.Sem force-+ 4 2 1))
;(constraint (E.Sem force-+ 2 5 5))
;(constraint (E.Sem force-+ 1 1 1))

;; ;;;
;;; Instruct the solver to find the constant addition
;;;
(check-synth)
